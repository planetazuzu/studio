// src/lib/db.ts

/**
 * This file acts as a facade for the database provider.
 * All application code should import data access functions from here.
 * This file imports the currently active DB provider (selected by the factory)
 * and re-exports its functions. This makes it easy to switch out the
 * underlying database (e.g., from Dexie to a REST API) without changing
 * any of the application's component code.
 */

import { dbProvider } from './db-providers';

// Re-export all functions from the selected provider.
export const {
  db,
  populateDatabase,
  login,
  logout,
  getLoggedInUser,
  addUser,
  bulkAddUsers,
  getAllUsers,
  getUserById,
  updateUser,
  updateUserStatus,
  saveFcmToken,
  deleteUser,
  addCourse,
  getAllCourses,
  getCourseById,
  updateCourse,
  updateCourseStatus,
  deleteCourse,
  requestEnrollment,
  getApprovedEnrollmentCount,
  getPendingEnrollmentsWithDetails,
  getAllEnrollmentsWithDetails,
  getEnrollmentsForStudent,
  updateEnrollmentStatus,
  getEnrolledCoursesForUser,
  getIncompleteMandatoryCoursesForUser,
  getUserProgress,
  getUserProgressForUser,
  markModuleAsCompleted,
  addForumMessage,
  getForumMessages,
  deleteForumMessage,
  addNotification,
  getNotificationsForUser,
  markNotificationAsRead,
  markAllNotificationsAsRead,
  checkAndSendDeadlineReminders,
  addResource,
  getAllResources,
  deleteResource,
  associateResourceWithCourse,
  dissociateResourceFromCourse,
  getResourcesForCourse,
  getAssociatedResourceIdsForCourse,
  addAnnouncement,
  deleteAnnouncement,
  getAllAnnouncements,
  getVisibleAnnouncementsForUser,
  addChatMessage,
  getChatMessages,
  getPublicChatChannels,
  addPublicChatChannel,
  getDirectMessageThreadsForUserWithDetails,
  getOrCreateDirectMessageThread,
  getComplianceReportData,
  getAllCalendarEvents,
  getCalendarEvents,
  addCalendarEvent,
  updateCalendarEvent,
  deleteCalendarEvent,
  getExternalTrainingsForUser,
  addExternalTraining,
  updateExternalTraining,
  deleteExternalTraining,
  getAllCosts,
  addCost,
  updateCost,
  deleteCost,
  getAllCostCategories,
  addCostCategory,
  deleteCostCategory,
  getCoursesByInstructorName,
  getStudentsForCourseManagement,
  getAllBadges,
  getBadgesForUser,
  awardBadge,
  getAIConfig,
  saveAIConfig,
  logAIUsage,
  getAllLearningPaths,
  getLearningPathById,
  addLearningPath,
  updateLearningPath,
  deleteLearningPath,
  getLearningPathsForUser,
  addCourseRating,
  getRatingByUserAndCourse,
  getRatingsForCourse,
  getRatingsForInstructor,
  toggleCourseRatingVisibility,
  getPermissionsForRole,
  updatePermissionsForRole,
  logSystemEvent,
  getSystemLogs,
  clearAllSystemLogs,
} = dbProvider;
